// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
)

const createGodo = `-- name: CreateGodo :one
INSERT INTO godos (text, done) VALUES (?, ?) RETURNING id, text, done, created_at
`

type CreateGodoParams struct {
	Text string
	Done bool
}

func (q *Queries) CreateGodo(ctx context.Context, arg CreateGodoParams) (Godo, error) {
	row := q.db.QueryRowContext(ctx, createGodo, arg.Text, arg.Done)
	var i Godo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Done,
		&i.CreatedAt,
	)
	return i, err
}

const getGodo = `-- name: GetGodo :one
SELECT id, text, done, created_at FROM godos WHERE id = ? LIMIT 1
`

func (q *Queries) GetGodo(ctx context.Context, id int64) (Godo, error) {
	row := q.db.QueryRowContext(ctx, getGodo, id)
	var i Godo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Done,
		&i.CreatedAt,
	)
	return i, err
}

const listGodos = `-- name: ListGodos :many
SELECT id, text, done, created_at FROM godos ORDER BY id
`

func (q *Queries) ListGodos(ctx context.Context) ([]Godo, error) {
	rows, err := q.db.QueryContext(ctx, listGodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Godo
	for rows.Next() {
		var i Godo
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Done,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGodoDone = `-- name: UpdateGodoDone :exec
UPDATE godos SET done = ? WHERE id = ?
`

type UpdateGodoDoneParams struct {
	Done bool
	ID   int64
}

func (q *Queries) UpdateGodoDone(ctx context.Context, arg UpdateGodoDoneParams) error {
	_, err := q.db.ExecContext(ctx, updateGodoDone, arg.Done, arg.ID)
	return err
}
